rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for data validation
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidJournalEntry() {
      let requiredFields = ['text', 'createdAt', 'updatedAt', 'userId'];
      let allowedFields = ['text', 'summary', 'createdAt', 'updatedAt', 'userId'];

      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.keys().hasOnly(allowedFields) &&
             request.resource.data.text is string &&
             request.resource.data.text.size() > 0 &&
             request.resource.data.text.size() <= 10000 &&
             request.resource.data.userId == request.auth.uid &&
             request.resource.data.createdAt is timestamp &&
             request.resource.data.updatedAt is timestamp &&
             (request.resource.data.summary == null ||
              (request.resource.data.summary is string &&
               request.resource.data.summary.size() <= 500));
    }

    function isValidJournalUpdate() {
      let allowedFields = ['text', 'summary', 'updatedAt'];
      let changedFields = request.resource.data.diff(resource.data).changedKeys();

      return changedFields.hasOnly(allowedFields) &&
             (changedFields.hasAny(['text']) ?
               (request.resource.data.text is string &&
                request.resource.data.text.size() > 0 &&
                request.resource.data.text.size() <= 10000) : true) &&
             (changedFields.hasAny(['summary']) ?
               (request.resource.data.summary == null ||
                (request.resource.data.summary is string &&
                 request.resource.data.summary.size() <= 500)) : true) &&
             (changedFields.hasAny(['updatedAt']) ?
               request.resource.data.updatedAt is timestamp : true) &&
             // Ensure core fields cannot be changed
             request.resource.data.userId == resource.data.userId &&
             request.resource.data.createdAt == resource.data.createdAt;
    }

    // Users collection - allow users to create their own user document
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);

      // Journal entries subcollection
      match /journalEntries/{entryId} {
        // Read: User can only read their own journal entries
        allow read: if isAuthenticated() && isOwner(userId);

        // Create: User can only create journal entries in their own collection
        allow create: if isAuthenticated() &&
                         isOwner(userId) &&
                         isValidJournalEntry();

        // Update: User can only update their own journal entries with valid data
        allow update: if isAuthenticated() &&
                         isOwner(userId) &&
                         isValidJournalUpdate();

        // Delete: User can only delete their own journal entries
        allow delete: if isAuthenticated() && isOwner(userId);
      }
    }

    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}